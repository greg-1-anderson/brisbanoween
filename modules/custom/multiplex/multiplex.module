<?php

/**
 * @file
 * Primary module hooks for Multiplex module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

function multiplex_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  // UPDATE THIS PATH TO YOUR MODULE'S CSS PATH
  $path = drupal_get_path('module', 'multiplex') . '/css/reactive_theme.css';
  if (isset($css[$path])) {
    // Use anything greater than 100 to have it load after the theme as CSS_AGGREGATE_THEME is set to 100.
    $css[$path]['group'] = 1000;
  }
}

/**
 * Implements hook_help().
 */
function multiplex_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the multiplex module.
    case 'help.page.multiplex':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Multiplex module: redirect to different locations based on rules.') . '</p>';
      return $output;
    default:
  }
}

function multiplex_get_visitor_cookie_value() {
  $settings_name = 'multiplex.settings';
  if (\Drupal::moduleHandler()->moduleExists('guest_upload')) {
    $settings_name = 'guest_upload.settings';
  }
  $cookie = \Drupal::config($settings_name)->get('cookie');
  $who = $_COOKIE[$cookie] ?? '';
  return $who;
}

/**
 * Get the array of items in the user's inventory (in the order they were obtained)
 *
 * @return the array of item names
 */
function multiplex_get_user_inventory() {
  $inventory_cookie = \Drupal::config('multiplex.settings')->get('inventory_cookie');
  $currentInventoryValue = $_COOKIE[$inventory_cookie] ?? NULL;
  return $currentInventoryValue ? explode(",", $currentInventoryValue) : array();
}

/**
 * Get the display configuration for the inventory component
 */
function getInventoryConfig() {
  $config = \Drupal::config('multiplex.settings');
  return [
    'cookie_name' => $config->get('inventory_cookie'),                           // The name of the cookie to store the inventory in
    'last_item_added_cookie_name' => $config->get('inventory_added_cookie'),     // The name of the cookie to store hte last added timestamp in
    'wiggle_duration_ms' => intval($config->get('inventory_wiggle_duration')),                           // How many milliseconds after aquiring an item should it wiggle (0 = disabled)
    'use_fixed_order' => $config->get('inventory_fixed_order') ? true : false,                                // Visibly display items in a fixed order.  set to false to ignore "fixed_order" property on each item
    'image_width' => intval($config->get('inventory_icon_width')),
    'image_height' => intval($config->get('inventory_icon_height')),
    'link_base_url' => $config->get('inventory_base_url'),
    'open_links_in_new_window' => $config->get('inventory_links_in_new_window') ? true : false,
    'update_frequency' =>  intval($config->get('inventory_update_frequency')),
    'links' => [
    	// If you want to make some inventory items into links (from the server side), you can add the item_id -> link mapping here.
    	// You can also include some javascript (see example_js_for_adding_links_to_inventory.js) on the specific page you want to activate an item for.
    	//
    	// 'item_id' => 'url',
    	// 'item2_id' => 'url'
    ]
  ];
}

/**
 * Get a collection of all the possible inventory items and their associated display configuration
 */
function getInventoryItems() {
  $base_path = "/" . drupal_get_path('module', 'multiplex') . "/";
  return [
    'lantern' => [
      'url' => $base_path . 'images/objects/lantern.png',
      'alt' => 'The green spooky lantern of magic',
      'fixed_order' => 1,
    ],
    'pumpkin' => [
      'url' => $base_path . 'images/objects/pumpkin.png',
      'alt' => 'The enchanted pumpkin',
      'fixed_order' => 2,
    ],
    'top_hat' => [
      'url' => $base_path . 'images/objects/top_hat.png',
      'alt' => 'A musty old hat',
      'fixed_order' => 3,
    ],
    'old_key' => [
      'url' => $base_path . 'images/objects/old_key.png',
      'alt' => 'A mysterious key, I wonder what it goes to',
      'fixed_order' => 4,
    ]
  ];
}

/**
 * Get the map display configuration
 */
function getMapConfig() {
  $base_path = "/" . drupal_get_path('module', 'multiplex') . "/";
  $config = \Drupal::config('multiplex.settings');
  return [
    'backgroundImage' => $base_path . 'images/map_background.jpg',    // A repeating background image, or one that is the exact size of the map
    'linkPrefix' => $config->get('map_link_prefix'),                                // The URL to prefix codes with when creating links
    'iconPrefix' => $base_path . "images/",					// The URL to prefix icon paths with
    'visitedName' => $config->get('map_visited_label'),                                       // What to call unvisited locations in the legend
    'unvisitedName' => $config->get('map_unvisited_label'),                                   // What to call visited locations in the legend
    'centerPosition' => [              // Where to center the map
      'lat' => floatval($config->get('map_center_lat')),
      'lng' => floatval($config->get('map_center_lng'))
    ],
    'zoomLevel' => floatval($config->get('map_default_zoom')),                 // How close to zoom in, the higher the closer to street level it will zoom
    'openLinksInNewWindow' => $config->get('map_open_links_in_new_window') ? true : false,    // Whether to open links in a new window (true) or redirect the current window (false)
    'allowChangeMapType' => $config->get('map_allow_type_toggle') ? true : false,
    'useRoadmap' => $config->get('map_use_roadmap') ? true : false,
    'allowStreetView' => $config->get('map_allow_street_view') ? true : false,
    'nightMode' => $config->get('map_night_mode') ? true : false,
    'mapOpacity' => floatval($config->get('map_opacity')),
    'showUserLocation' => $config->get('map_show_user_location') ? true : false,
    'updateFrequency' => intval($config->get('map_update_frequency')),
    'apiEndpoint' => 'multiplex/api/locations', // $base_path . "fake_api_response.json"
  ];
}

function getPrivacyConfig() {
  $config = \Drupal::config('multiplex.settings');
  return [
    'cookieName' => $config->get('privacy_cookie'),
    'title' => $config->get('privacy_title'),
    'message' => $config->get('privacy_message'),
    'acceptButton' => $config->get('privacy_accept_button'),
    'rejectButton' => $config->get('privacy_reject_button')
  ];
}

/**
 * Attach our Javascript
 */
function multiplex_page_attachments(array &$page) {
  //if (!\Drupal::currentUser()->hasPermission('some permission not yet defined')) {
  //  return;
  //}

  //$who = multiplex_get_visitor_cookie_value();
  //if (empty($who)) {
  //  return;
  //}
  
  error_log("Running attachments");

  $config = \Drupal::config('multiplex.settings');

  $inventory_enabled = true;
  $map_enabled = false;
  $counter_enabled = false;
  $privacy_enabled = true;

  // See if this is the map page
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, "/map") === 0) {
    // It is, so show the map, but dont show the inventory component
    $inventory_enabled = false;
    $map_enabled = true;
    
    error_log("Attach google maps api");

    // Attach the google api script
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
        	'src' => "https://maps.googleapis.com/maps/api/js?key=" . $config->get('map_api_key') . "&callback=initMap",
        	'type' => "text/javascript",
        	"defer" => true
        ],
        // Give weight so it appears after meta tags, etc.
        '#weight' => -1,
      ],
      // A key, to make it possible to recognize this HTML <HEAD> element when altering.
      'googleMapAPI'
    ];

    // Hide the main page elements
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'style',
        '#value' => 'BODY { ' . ($config->get('map_night_mode') ? 'background-color: #000000; ' : '') . 'margin:0px 0px 0px 0px; } .dialog-off-canvas-main-canvas { display:none; }',
        '#weight' => -1,
      ],
      // A key, to make it possible to recognize this HTML <HEAD> element when altering.
      'hidePageUI'
    ];
  }
  
  // See if we need to show the countdown timer (/wait/*)
  $counter_target = NULL;
  $game_start_time = NULL;
  $game_start_time = intval($config->get("game_start_time"));
  $counter_new_window = $config->get("counter_open_in_new_window") ? true : false;
  if (strpos($current_path, "/wait") === 0 && strlen($current_path) > 7) {
  	$counter_enabled = true;
  	$counter_target = substr($current_path, 5);
  }

  // Pass some values down the JS to configure the map and inventory displays
  $computed_settings = [
    'countdown' => [
	'enabled' => $counter_enabled,
	'startTime' => $game_start_time,
	'target' => $counter_target,
	'openInNewWindow' => $counter_new_window,
    ],
    //'privacy' => [
    //	'enabled' => $privacy_enabled,
    //	'config' => getPrivacyConfig()
    //],
    'map' => [
	'enabled' => $map_enabled,
	'config' => getMapConfig()
    ],
    'inventory' => [
	'items' => getInventoryItems(),
	'config' => getInventoryConfig(),
	'enabled' => $inventory_enabled
    ]
  ];
  
  error_log("Returning attachments");

  $page['#attached']['library'][] = 'multiplex/multiplex';
  $page['#attached']['drupalSettings']['multiplex'] = $computed_settings;
}
