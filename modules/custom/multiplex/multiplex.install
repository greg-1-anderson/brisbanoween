<?php

/**
 * @file
 * Install, update and uninstall functions for the Multiplex module.
 */

/**
 * Implements hook_install().
 */
function multiplex_install() {
  // \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function multiplex_uninstall() {
  // \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_schema().
 */
function multiplex_schema() {
  $schema['multiplex_visitors'] = [
    'description' => 'Visitor records - who has visited which story pages.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record. Informative only.',
      ],
      'who' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Cookie data identifying anonymous users.',
      ],
      // TODO: path and target should probably be nids
      'path' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Path that was visited.',
      ],
      'target' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'If the multiplex target is random per-visitor, then we save the target so that the same user will get consistent results.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'visited' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was most recently visited.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'uid' => ['uid'],
      'who' => ['who'],
    ],
  ];

  $schema['multiplex_map_markers'] = [
    'description' => 'Map markers - location of QR codes scanned by visitors.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record. Informative only.',
      ],
      'who' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Cookie data identifying anonymous users.',
      ],
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid of the QR code.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'visited' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was most recently visited.',
      ],
      'lat' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Latitude',
      ],
      'lng' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Longitude',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'uid' => ['uid'],
      'who' => ['who'],
      'lat' => ['lat'],
      'lng' => ['lng'],
    ],
  ];

  return $schema;
}

/**
 * Add latitude and longitude columns to multiplex_visitors
 */
function multiplex_update_8001() {
  $spec = [
    'type' => 'float',
    'default' => 0,
    'description' => 'Latitude',
  ];
  db_add_field('multiplex_visitors', 'lat', $spec);
  $spec = [
    'type' => 'float',
    'default' => 0,
    'description' => 'Longitude',
  ];
  db_add_field('multiplex_visitors', 'lng', $spec);
}

/**
 * Add map markers table
 */
function multiplex_update_8002() {
  $spec = [
    'description' => 'Map markers - location of QR codes scanned by visitors.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record. Informative only.',
      ],
      'who' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Cookie data identifying anonymous users.',
      ],
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid of the QR code.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'visited' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was most recently visited.',
      ],
      'lat' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Latitude',
      ],
      'lng' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Longitude',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'uid' => ['uid'],
      'who' => ['who'],
      'lat' => ['lat'],
      'lng' => ['lng'],
    ],
  ];
  $schema = Database::getConnection()->schema();
  $schema->createTable('multiplex_map_markers', $spec);
}

/**
 * Implements hook_requirements().
 */
function multiplex_requirements($phase) {
  $requirements = [];

/*
  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['multiplex_status'] = [
      'title' => t('Multiplex status'),
      'value' => t('Multiplex value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }
*/

  return $requirements;
}
