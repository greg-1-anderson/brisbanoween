<?php

/**
 * @file
 * Install, update and uninstall functions for the Multiplex module.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_install().
 */
function multiplex_install() {
  // \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function multiplex_uninstall() {
  // \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_schema().
 */
function multiplex_schema() {
  $schema['multiplex_visitors'] = [
    'description' => 'Visitor records - who has visited which story pages.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record. Informative only.',
      ],
      'who' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Cookie data identifying anonymous users.',
      ],
      'path_nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid of the QR code or story node that was visited.',
      ],
      'target_nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid of the story node returned from the multiplex evaluation.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'visited' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was most recently visited.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'uid' => ['uid'],
      'who' => ['who'],
    ],
  ];

  $schema['multiplex_map_markers'] = [
    'description' => 'Map markers - location of QR codes scanned by visitors.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record. Informative only.',
      ],
      'who' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Cookie data identifying anonymous users.',
      ],
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid of the QR code.',
      ],
      'code' => [
        'type' => 'varchar_ascii',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The path to the QR code.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'visited' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was most recently visited.',
      ],
      'hinted' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was provided as a hint.',
      ],
      'lat' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Latitude',
      ],
      'lng' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Longitude',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'uid' => ['uid'],
      'who' => ['who'],
      'lat' => ['lat'],
      'lng' => ['lng'],
    ],
  ];

  return $schema;
}

/**
 * Add latitude and longitude columns to multiplex_visitors
 */
function multiplex_update_8001() {
  $schema = Database::getConnection()->schema();
  $spec = [
    'type' => 'float',
    'default' => 0,
    'description' => 'Latitude',
  ];
  $schema->addField('multiplex_visitors', 'lat', $spec);
  $spec = [
    'type' => 'float',
    'default' => 0,
    'description' => 'Longitude',
  ];
  $schema->addField('multiplex_visitors', 'lng', $spec);
}

/**
 * Remove latitude and logitude columns from multiplex_visitors (undo 8001)
 */
function multiplex_update_8002() {
  $schema = Database::getConnection()->schema();
  $schema->dropField('multiplex_visitors', 'lat');
  $schema->dropField('multiplex_visitors', 'lng');
}

/**
 * Replace 'path' and 'target' columns from multiplex_visitors with columns that store node nids.
 */
function multiplex_update_8003() {
  $schema = Database::getConnection()->schema();
  $schema->dropField('multiplex_visitors', 'path');
  $schema->dropField('multiplex_visitors', 'target');
  $spec = [
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'description' => 'The {node}.nid of the QR code or story node that was visited.',
  ];
  $schema->addField('multiplex_visitors', 'path_nid', $spec);
  $spec = [
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'description' => 'The {node}.nid of the story node returned from the multiplex evaluation.',
  ];
  $schema->addField('multiplex_visitors', 'target_nid', $spec);

  // Delete all content from the visitors table
  $connection = \Drupal::database();
  $connection->delete('multiplex_visitors')->execute();
}

/**
 * Add map markers table
 */
function multiplex_update_8004() {
  $spec = [
    'description' => 'Map markers - location of QR codes scanned by visitors.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record. Informative only.',
      ],
      'who' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Cookie data identifying anonymous users.',
      ],
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid of the QR code.',
      ],
      'code' => [
        'type' => 'varchar_ascii',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The path to the QR code.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'visited' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was most recently visited.',
      ],
      'lat' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Latitude',
      ],
      'lng' => [
        'type' => 'float',
        'default' => 0,
        'description' => 'Longitude',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'uid' => ['uid'],
      'who' => ['who'],
      'lat' => ['lat'],
      'lng' => ['lng'],
    ],
  ];
  $schema = Database::getConnection()->schema();
  $schema->createTable('multiplex_map_markers', $spec);
}

/**
 * Add 'hinted' timestamp to multiplex_map_markers
 */
function multiplex_update_8005() {
  $schema = Database::getConnection()->schema();
  $spec = [
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Timestamp when the record was provided as a hint.',
  ];
  $schema->addField('multiplex_map_markers', 'hinted', $spec);
}

/**
 * Implements hook_requirements().
 */
function multiplex_requirements($phase) {
  $requirements = [];

/*
  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['multiplex_status'] = [
      'title' => t('Multiplex status'),
      'value' => t('Multiplex value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }
*/

  return $requirements;
}
